{"version":3,"sources":["assets/images/map-pins/evappin.svg","components/Homepage/index.js","pages/Homepage/index.js"],"names":["module","exports","connect","state","user","stepper","model","chargeboxes","appReducer","chargeBox","sidebarToggle","ThemeOptions","sidebarToggleMobile","isStepper","dispatch","setSidebarToggle","enable","setSidebarToggleMobile","setChargeBoxesInfo","data","Actions","getChargeBox","setStepper","setloginModel","GoogleApiWrapper","apiKey","props","useState","chargebox","setchargebox","lat","lng","geoCode","setGeoCode","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","get","then","result","catch","onMarkerClick","s","chargeboxid","className","style","height","containerStyle","width","google","center","zoom","map","i","key","onClick","title","name","parseFloat","misc","icon","Pin","Homepage"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,qC,uKC+H5BC,eAhBS,SAACC,GAAD,MAAY,CAClCC,KAAMD,EAAMC,KACZC,QAASF,EAAMG,MAAMD,QACrBE,YAAaJ,EAAMK,WAAWC,UAC9BC,cAAeP,EAAMQ,aAAaD,cAClCE,oBAAqBT,EAAMQ,aAAaC,oBACxCC,UAAWV,EAAMK,WAAWH,YAEH,SAACS,GAAD,MAAe,CACxCC,iBAAkB,SAACC,GAAD,OAAYF,EAASC,YAAiBC,KACxDC,uBAAwB,SAACD,GAAD,OAAYF,EAASG,YAAuBD,KACpEE,mBAAoB,SAACC,GAAD,OAAUL,EAASM,IAA2BD,KAClEE,aAAc,SAACF,EAAMf,GAAP,OAAgBU,EAASM,IAAqBD,EAAMf,KAClEkB,WAAY,SAACH,GAAD,OAAUL,EAASM,IAAgBD,KAC/CI,cAAe,SAACJ,GAAD,OAAUL,EAASM,IAAmBD,QAExCjB,CAIbsB,2BAAiB,CACfC,OAAQ,2CADVD,EAxHmB,SAACE,GACpB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAAS,CAAEG,IAAK,QAASC,IAAK,UAA5D,mBAAOC,EAAP,KAAgBC,EAAhB,KACAC,qBAAU,WAEH,gBAAiBC,UAEpBA,UAAUC,YAAYC,oBACpB,SAACC,GACCL,EAAW,CACRH,IAAIQ,EAASC,OAAOC,SAAUT,IAAKO,EAASC,OAAOE,eAGxD,SAACC,GACCC,QAAQD,MAAM,6BAA8BA,MAIhDC,QAAQD,MAAM,mDAEf,CAAChB,EAAMrB,UACV6B,qBAAU,WACRU,YAAI,gBACDC,MAAK,SAACC,GACLjB,EAAaiB,MAEdC,MAAMJ,QAAQD,SAChB,IACH,IAMMM,EAAgB,SAACC,GAChBvB,EAAMtB,MAIXsB,EAAMR,mBAAmB+B,GAEzBvB,EAAML,aAAa4B,EAAEC,YAAaxB,EAAMtB,MAZxCsB,EAAMT,wBAAwBS,EAAMd,sBAOlCc,EAAMH,eAAc,IAoCxB,OACE,oCACE,kBAAC,MAAD,CACA4B,UAAU,QACVC,MAAO,CAAEC,OAAQ,sBACjBC,eAhCmB,CACrBhB,SAAU,WACViB,MAAO,OACPF,OAAQ,QA8BNG,OAAQ9B,EAAM8B,OACdC,OAAQzB,EACR0B,KAAM,IAEL9B,EAAU+B,KAAI,SAACV,EAAGW,GAAJ,OACb,kBAAC,SAAD,CACEC,IAAKD,EACLE,QAAS,kBAAMd,EAAcC,IAC7Bc,MAAOd,EAAEe,KACTA,KAAMf,EAAEe,KACR1B,SAAU,CACRR,IAAKmC,WAAWhB,EAAEiB,KAAK1B,UACvBT,IAAKkC,WAAWhB,EAAEiB,KAAKzB,YAEzB0B,KAAMC,eCrGD,SAASC,IACtB,OACE,oCACE,kBAACA,EAAD","file":"static/js/9.409cf7df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/evappin.947a2313.svg\";","import * as Actions from \"Actions\";\nimport { get } from \"api\";\nimport Pin from \"assets/images/map-pins/evappin.svg\";\nimport { GoogleApiWrapper, Map, Marker } from \"google-maps-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  setSidebarToggle,\n  setSidebarToggleMobile,\n} from \"reducers/ThemeOptions\";\n\nconst MapContainer = (props) => {\n  const [chargebox, setchargebox] = useState([]);\n  const [geoCode, setGeoCode] = useState({ lat: 24.8607, lng: 67.0011 });\n  useEffect(() => {\n   \n     if ('geolocation' in navigator) {\n      // Get the current position\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setGeoCode({\n             lat:position.coords.latitude, lng: position.coords.longitude\n          })\n        },\n        (error) => {\n          console.error('Error getting geolocation:', error);\n        }\n      );\n    } else {\n      console.error('Geolocation is not available in this browser.');\n    }\n  }, [props.stepper]);\n  useEffect(() => {\n    get(\"/chargeboxes\")\n      .then((result) => {\n        setchargebox(result);\n      })\n      .catch(console.error);\n  }, []);\n  const toggleSidebarMobile = () => {\n    props.setSidebarToggleMobile(!props.sidebarToggleMobile);\n  };\n  const toggleSidebar = () => {\n    props.setSidebarToggle(!props.sidebarToggle);\n  };\n  const onMarkerClick = (s) => {\n    if (!props.user) {\n      props.setloginModel(true);\n      return;\n    }\n    props.setChargeBoxesInfo(s);\n    // history.push(`/chargebox/${s?.chargeboxid}`);\n    props.getChargeBox(s.chargeboxid, props.user);\n    toggleSidebarMobile();\n  };\n\n  const containerStyle = {\n    position: \"relative\",\n    width: \"100%\",\n    height: \"100%\",\n  };\n\n  const jsonData = [\n    {\n      chargeboxid: \"1\",\n      latitude: \"24.8607\",\n      longitude: \"67.0011\",\n      city: \"Karachi\",\n    },\n    {\n      chargeboxid: \"2\",\n      latitude: \"31.5497\",\n      longitude: \"74.3436\",\n      city: \"Lahore\",\n    },\n    {\n      chargeboxid: \"3\",\n      latitude: \"33.6844\",\n      longitude: \"73.0479\",\n      city: \"Islamabad\",\n    },\n    // Add more city data objects as needed\n  ];\n  return (\n    <>\n      <Map\n      className=\"w-100\"\n      style={{ height: \"calc(100vh - 74px)\" }}\n      containerStyle={containerStyle}\n      google={props.google}\n      center={geoCode}\n      zoom={14}\n    >\n      {chargebox.map((s, i) => (\n        <Marker\n          key={i}\n          onClick={() => onMarkerClick(s)}\n          title={s.name}\n          name={s.name}\n          position={{\n            lat: parseFloat(s.misc.latitude),\n            lng: parseFloat(s.misc.longitude),\n          }}\n          icon={Pin}\n        />\n      ))}\n    </Map>\n    </>\n      \n  );\n};\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  stepper: state.model.stepper,\n  chargeboxes: state.appReducer.chargeBox,\n  sidebarToggle: state.ThemeOptions.sidebarToggle,\n  sidebarToggleMobile: state.ThemeOptions.sidebarToggleMobile,\n  isStepper: state.appReducer.stepper,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  setSidebarToggle: (enable) => dispatch(setSidebarToggle(enable)),\n  setSidebarToggleMobile: (enable) => dispatch(setSidebarToggleMobile(enable)),\n  setChargeBoxesInfo: (data) => dispatch(Actions.getChargeBoxesInfo(data)),\n  getChargeBox: (data, user) => dispatch(Actions.getChargeBox(data, user)),\n  setStepper: (data) => dispatch(Actions.stepper(data)),\n  setloginModel: (data) => dispatch(Actions.loginModel(data)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  GoogleApiWrapper({\n    apiKey: \"AIzaSyB-QSr8fnsq_tujGc0BY5WBrwUEtcnyjJg\",\n  })(MapContainer)\n);\n","import Homepage1 from 'components/Homepage';\nimport React from 'react';\nexport default function Homepage() {\n  return (\n    <>\n      <Homepage1 />\n      {/* <Footer /> */}\n    </>\n  );\n}\n"],"sourceRoot":""}